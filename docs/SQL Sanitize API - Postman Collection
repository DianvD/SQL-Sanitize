{
	"info": {
		"_postman_id": "af5d53a1-c39a-4af4-8b68-0e63cb7ba5e6",
		"name": "SQL Sanitize API",
		"description": "CRUD for sensitive words/phrases + sanitize endpoint.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12323745"
	},
	"item": [
		{
			"name": "Get all sensitive words",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/sensitive-words",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"sensitive-words"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add a sensitive word/phrase",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"word\": \"action\"}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/sensitive-words",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"sensitive-words"
					]
				},
				"description": "Creates a new sensitive word. Body example: {\"word\":\"SELECT\"}"
			},
			"response": []
		},
		{
			"name": "Update a sensitive word by ID",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"word\": \"actions\"}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/sensitive-words/:id?=7",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"sensitive-words",
						":id"
					],
					"query": [
						{
							"key": null,
							"value": "7"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "7"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a sensitive word by ID",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/sensitive-words/:id?=7",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"sensitive-words",
						":id"
					],
					"query": [
						{
							"key": null,
							"value": "7"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "7"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Sanitize Query",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"input\": \"SELECT name, salary FROM employees WHERE department = 'HR' AND salary > 50000 ORDER BY hire_date DESC; INSERT INTO audit_log (event, created_at) VALUES ('DROP TABLE test;' , GETDATE()); UPDATE accounts SET balance = balance - 100 WHERE id = 42; DELETE FROM sessions WHERE expires < CURRENT_TIMESTAMP; GRANT SELECT, UPDATE ON dbo.Customers TO 'app_user'; CREATE VIEW top_salaries AS SELECT TOP 10 * FROM employees ORDER BY salary DESC; ALTER TABLE orders ADD CONSTRAINT chk_total CHECK (total >= 0); BEGIN TRANSACTION; COMMIT; ROLLBACK; TRUNCATE TABLE temp_data;\"\r\n  }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/sensitive-words/sanitize",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"sensitive-words",
						"sanitize"
					]
				},
				"description": "Generated from cURL: curl -X POST \"http://localhost:8080/api/sensitive-words/sanitize\" \\\r\n  -H \"Content-Type: application/json\" \\\r\n  -d '{\r\n    \"input\": \"SELECT name, salary FROM employees WHERE department = '\\''HR'\\'' AND salary > 50000 ORDER BY hire_date DESC; INSERT INTO audit_log (event, created_at) VALUES ('\\''DROP TABLE test;'\\'' , GETDATE()); UPDATE accounts SET balance = balance - 100 WHERE id = 42; DELETE FROM sessions WHERE expires < CURRENT_TIMESTAMP; GRANT SELECT, UPDATE ON dbo.Customers TO '\\''app_user'\\''; CREATE VIEW top_salaries AS SELECT TOP 10 * FROM employees ORDER BY salary DESC; ALTER TABLE orders ADD CONSTRAINT chk_total CHECK (total >= 0); BEGIN TRANSACTION; COMMIT; ROLLBACK; TRUNCATE TABLE temp_data;\"\r\n  }'\r\n"
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		}
	]
}
